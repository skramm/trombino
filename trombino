#!/usr/bin/env bash

# S. Kramm - 2022-2023
# https://github.com/skramm/trombino
# création automatique de trombinoscope

set +x
# 2024-09-20: ajout version HTML (switch -w)

version=1.2.2

# dossier par défaut contenant les photos
photos=photos/

# fichier csv d'entrée par défaut contenant groupe,nom,prénom
input_file=liste.csv

# nom fichier de sortie par défaut
out_fn=trombi

# nb de colonnes par défaut
nb_cols=4

# nb de lignes max
max_lines=4

# initialisation variables
count_lines=0
count_cols=0
count_pages=0

# default field separator
IFS=,

# swap Firstname-Lastname
swapfnln=false

current_group=nogroup
header_file=trombi_header.tex
html=0


#-----------------------------------------------------------------------------
# FONCTIONS
#-----------------------------------------------------------------------------
function close_page
{
	if $table_is_closed ; then
		return;
	fi

	(( count_cols+=1 ))
	if ! $line_is_closed ;
	then
		while [ $count_cols != $nb_cols ]
		do
			echo "&" >>$outfile
			if [ $html == 1 ]
			then
				echo "<td></td>" >>$outfile_html
			fi
			(( count_cols+=1 ))
		done
		echo "\\\ \hline" >>$outfile

		if [ $html == 1 ]
		then
			echo "</tr></table>" >> $outfile_html
		fi
	fi
	echo "\end{tabularx}" >>$outfile
	echo "" >>$outfile
	echo "\clearpage" >>$outfile
	line_is_closed=true
	table_is_closed=true;

	if [ $html == 1 ]
	then
		echo "</table>" >> $outfile_html
	fi
}

function reset_all
{
	count_lines=0
	count_cols=0
}

#-----------------------------------------------------
# opens new page
# - arg1: 0: no group title, 1: print group as title
# - arg2: group
function new_page
{
	if [ $1 == 1 ];
	then
		echo "\begin{center}" >>$outfile
		echo "\bf \huge" >>$outfile
		echo "Groupe $2" >>$outfile
		echo "\end{center}" >>$outfile
		if [ $html == 1 ]
		then
			echo -e "<h3>Groupe $2</h3>\n<table>" >>$outfile_html
		fi
	fi
	echo "" >>$outfile
	echo -n "\begin{tabularx}{\linewidth}{|" >>$outfile
	for (( i=0;i<$nb_cols;i++ ))
	do
		printf "X|" >>$outfile
	done
	echo "}\hline" >>$outfile
	table_is_closed=false;

#	if [ $html == 1 ]
#	then
#		echo "<table>" >>$outfile_html
#	fi
}

#-------------------- Main function for global output file, process one line -------------------------
function process_line_all
{
	line_is_closed=false

	if [ "$count_cols" -eq "0" ]
	then
		if [ "$count_lines" -eq "0" ]
		then
			new_page 0	
		fi
		if [ $html == 1 ]
		then
			echo "<tr>" >> $outfile_html
		fi
	fi

	photo="${1%.*}"
	photoh=$1
	echo "\includegraphics[width=$width\textwidth]{$photo} \newline" >>$outfile
	if [ $html == 1 ]
	then
		echo "<td><img src='$photos$photoh'>" >>$outfile_html
	fi
	firstname=$4
	lastname=$3
	current_group=$2
#	echo "fn=$firstname ln=$lastname gr=$current_group"
	echo "$firstname $lastname \newline gr $current_group">>$outfile

	if [ $html == 1 ]
	then
		echo "<p>$firstname $lastname <br> $current_group</p></td>">>$outfile_html
	fi

# print photo filename in debug mode
	if [ $debug_mode = true ];
	then
		echo "-$photo" >>$outfile
	fi

	(( count_cols += 1 ))

	if [ "$count_cols" -eq "$nb_cols" ]; then
		echo "\\\ \hline" >>$outfile
		line_is_closed=true
		(( count_lines += 1 ))
		count_cols=0
		if [ $html == 1 ]
		then
			echo "</tr>" >>$outfile_html
		fi
		if [ $count_lines -eq $max_lines ]; then
			echo "\end{tabularx}" >>$outfile
			echo "" >>$outfile
			echo "\clearpage" >>$outfile
			count_lines=0
#			if [ $html == 1 ]
#			then
#				echo "</table>" >>$outfile_html
#			fi

		fi
	else
		echo "&" >>$outfile
	fi

}

#-------------------- Main function for groups, process one line -------------------------
function process_line
{
# args: 1: photo filename, 2: group, 3: name, 4: firstname, 5: bac
#	echo -e "\n* processing name=$4 $3 current_group=$current_group bac=$5 photo=$1"

# SI nouveau groupe, alors il faut fermer la page et faire une nouvelle
	if [ "$current_group" != "$2" ]
	then
		if [ "$current_group" != "nogroup" ]
		then
			close_page
		fi
		current_group=$2
		reset_all
	fi

	if [ "$count_cols" -eq "0" ]
	then
		if [ "$count_lines" -eq "0" ]
		then
			new_page 1 $2
			if [ $html == 1 ]
			then
				echo "<tr>" >>$outfile_html
			fi
		fi
	fi
	
	line_is_closed=false

	photo="${1%.*}"
	photoh=$1
	echo "\includegraphics[width=$width\textwidth]{$photo} \newline" >>$outfile
	if [ $html == 1 ]
	then
		echo "<td><img src='$photos$photoh'><br>" >>$outfile_html
	fi
	firstname=$4
	lastname=$3

#	echo "abcd: firstname=$firstname lastname=$lastname"
#	printf "FN=%s-LN=%s",$firstname,$lastname

	if [ $swapfnln = true ]; then
		tmpvar="$firstname"
		firstname="$lastname"
		lastname="$tmpvar"
	fi

#	echo "APRES: firstname=$firstname  lastname=$lastname"
# capitalize Lastname
	echo "$lastname" | tr [:lower:] [:upper:] >>$outfile

# firstname is lower case, but first letter is uppercase
	firstname1=${firstname,,}
	firstname2=${firstname1^}
	echo "$firstname2" >>$outfile

	if [ $html == 1 ]
	then
		echo "<p>$lastname" | tr [:lower:] [:upper:] >>$outfile_html
		echo "$firstname2" >>$outfile_html
	fi

	if [ "$5" != "" ]; then
		echo " - $5" >>$outfile
		if [ $html == 1 ]
		then
			echo " - $5" >>$outfile_html
		fi
	fi
	if [ $html == 1 ]
	then
		echo "</p>" >>$outfile_html
	fi

# print photo filename in debug mode
	if [ $debug_mode = true ];
	then
		echo "-$photo" >>$outfile
		if [ $html == 1 ]
		then
			echo "-$photoh" >>$outfile_html
		fi
	fi

	(( count_cols += 1 ))

# if reached max number of columns
	if [ "$count_cols" -eq "$nb_cols" ];
	then
		echo "\\\ \hline" >>$outfile
		line_is_closed=true
		(( count_lines += 1 ))
		count_cols=0
		if [ $html == 1 ]
		then
			echo "</td></tr>" >>$outfile_html
		fi
	else
		echo "&" >>$outfile
		if [ $html == 1 ]
		then
			echo "</td>" >>$outfile_html
		fi
	fi

#	echo "count_cols=$count_cols count_lines =$count_lines  count_pages=$count_pages"
}


# ----------------------------------------------------------------------------
function close_source
{
# close what might need to be closed

if [ "$count_cols" -ne "0" ]; then
	close_page
	echo
fi

if ! $table_is_closed ; then
	close_page
fi

# close file
echo "" >>$outfile
echo "\end{document}" >>$outfile
}

# ----------------------------------------------------------------------------
function process_header
{
cat $header_file >$outfile

if [ $html == 1 ]
then
	echo "<html>" >$outfile_html
	echo -en "<head><link rel='stylesheet' href='trombi.css'>\n<title>Trombinoscope" >>$outfile_html
	if [ $1 == 0 ]
	then
		echo " global" >>$outfile_html	
	else
		echo " par groupe" >>$outfile_html	
	fi
	echo -e "</title></head><body><h1>Trombinoscope" >>$outfile_html
	if [ $1 == 0 ]
	then
		echo " global" >>$outfile_html	
	else
		echo " par groupe" >>$outfile_html	
	fi

	echo -e "</h1>\n<table>" >>$outfile_html
fi

if [ -f entete_ecole.txt ]; then
	cat entete_ecole.txt >>$outfile
else
	echo " -Warning: fichier entete_ecole.txt absent"
fi

echo "}">>$outfile

echo "\rhead{">>$outfile

if [ -f entete_annee.txt ]; then
	cat entete_annee.txt >>$outfile
else
	echo " -Warning: fichier entete_annee.txt absent"
fi

echo "}">>$outfile
echo "\begin{document}\noindent">>$outfile
echo "\graphicspath{ {../$photos/} }">>$outfile
}

# ----------------------------------------------------------------------------
function latex_build
{
cd BUILD
echo "* Etape 2: start pdflatex, fichier $outfile"
pdflatex -interaction=batchmode $outfile 1>pdflatex.stdout 2>pdflatex.stderr
if [ $? != 0 ]; then
	echo " -Erreur de compilation, voir fichier log"
else
	echo " -Compilation: ok"
fi

if [ -f $outfile.pdf ]; then
	echo " -Fichier $outfile.pdf généré"
	mv $outfile.pdf ..
else
	echo " -Erreur fatale, pas de pdf généré"
fi
cd ..
}

# ----------------------------------------------------------------------------
# DEBUT SCRIPT

echo "trombino $version, https://github.com/skramm/trombino"
echo " -h pour les options"

debug_mode=false

# etape 1: lecture des parametres

while [ -n "$1" ]; do # while loop starts
	case "$1" in
	-l)
		input_file="$2"
		shift
		;;
	-p)
		photos="$2"
		shift
		;;
	-d)
		debug_mode=true
		;;
	-c)
		nb_cols="$2"
		shift
		;;
	-f)
		IFS=$2
		fsep=$2
		echo "Utilisation de '$IFS' -- '$fsep' comme séparateur"
		shift
		;;
	-o)
		out_fn="$2"
		shift
		;;
	-s)
		swapfnln=true
		;;
	-w)
		html=1
		;;
	-h)
		echo " -l nom_fichier: pour spécifier un autre nom du fichier contenant la liste"
		echo " -p dossier: pour indiquer un autre dossier pour les photos"
		echo " -o nom_fichier: pour spécifier le nom du fichier pdf généré (sans extension!)"
		echo " -c: pour spécifier le nombre de colonnes"
		echo " -s: permutte nom - prénom"
		echo " -f SEP: separateur de champ"
		echo " -w: génération en HTML"
		echo " -d: active le mode \"debug\" qui va imprimer le nom de fichier de la photo avec le nom"
		exit 0
		;;

	*) echo " -Erreur: option $1 inconnue"; exit 1 ;;
	esac
	shift
done

# création dossier temporaire
mkdir -p BUILD
#echo "input_file=$input_file"
#set -x
if [ -f $input_file ]; then
	echo " -Lecture liste dans fichier '$input_file'"
else
	echo " -Erreur: fichier '$input_file' introuvable!"
	exit 2
fi

if [ -d $photos ]; then
	echo " -Lecture des photos dans dossier '$photos'"
else
	echo " -Erreur: dossier '$photos' introuvable!"
	exit 3
fi

echo " -Nom du fichier de sortie: ${out_fn}"
outfile1=BUILD/${out_fn}_groupes.tex
outfile2=BUILD/${out_fn}_global.tex
outfile1_html=BUILD/${out_fn}_groupes.html
outfile2_html=BUILD/${out_fn}_global.html

echo " -Nbe colonnes par page=$nb_cols"

# calcul largeur cellule en fonction du nbe de colonnes
width=$(bc <<< "scale=2;0.85/$nb_cols")

# part 1: création du fichier contenant les paires photo - Id

# liste des photos
ls $photos -1 > BUILD/list_photos.txt

# check
sed '/^[[:space:]]*$/d' $input_file > BUILD/input.csv
n1=$(wc -l <BUILD/input.csv)
n2=$(wc -l <BUILD/list_photos.txt)
if [ $n1 != $n2 ]
then
	echo " -Erreur, $n2 photos et $n1 noms dans la liste!"
	exit 1
fi
echo " -Lecture de $n1 personnes & photos"

echo "* Etape 1: génération fichiers intermédiaires"

# merge photos + noms/groupes
paste --delimiters="$IFS" BUILD/list_photos.txt BUILD/input.csv > BUILD/global_list_1.csv

# tri
sort -t, -k2,3 BUILD/global_list_1.csv >BUILD/global_list_2.csv

if [ ! -f BUILD/global_list_2.csv ]; then
	echo " -Erreur: fichier intermédiaire BUILD/global_list_2.csv absent..."
	exit 5
fi

# Génération du .tex
if [ ! -f "$header_file" ];
	then
	if [ ! -f "/etc/trombino/$header_file" ]; then
	    echo " -Erreur d'installation: fichier d'en-tête introuvable"
	    exit 5
	else
		header_file=/etc/trombino/$header_file
		echo " -Utilisation de l'en-tete par défaut $header_file"
	fi
else
	echo " -!!! Utilisation du fichier d'en tête local !!!"
fi


outfile=$outfile2
outfile_html=$outfile2_html
process_header 0
while read line; do
#     echo "line : $line"
	process_line_all $line
done < BUILD/global_list_1.csv
close_source

outfile=${out_fn}_global
latex_build


outfile=$outfile1
outfile_html=$outfile1_html
process_header 1
while read line; do
#     echo "line : $line"
	process_line $line
done < BUILD/global_list_2.csv
close_source

outfile=${out_fn}_groupes
latex_build


if [ $html == 1 ]
then
	echo "</body></html>" >>$outfile_html
	cp BUILD/*.html .
fi

exit 0


# ----------------------------------------------------------------------------


